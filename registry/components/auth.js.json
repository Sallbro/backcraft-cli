{
  "name": "auth",
  "language": "javascript",
  "dependencies": ["express", "dotenv", "jsonwebtoken", "bcryptjs"],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "routes/auth.js",
      "content": "const express = require('express');\nconst router = express.Router();\nconst { registerUser, loginUser, logoutUser } = require('../controllers/authController');\n\nrouter.post('/register', registerUser);\nrouter.post('/login', loginUser);\nrouter.post('/logout', logoutUser);\n\nmodule.exports = router;"
    },
    {
      "path": "controllers/authController.js",
      "content": "const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst dotenv = require('dotenv');\ndotenv.config();\n\n// Placeholder for user model - database-specific\nconst User = require('../models/User');\n\nconst generateToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '1d' });\n};\n\nexports.registerUser = async (req, res) => {\n  const { email, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  // Save user logic here\n  res.status(201).json({ message: 'User registered' });\n};\n\nexports.loginUser = async (req, res) => {\n  const { email, password } = req.body;\n  // Authentication logic here\n  const token = generateToken('user-id-placeholder');\n  res.json({ token });\n};\n\nexports.logoutUser = (req, res) => {\n  res.clearCookie('token');\n  res.json({ message: 'Logged out' });\n};"
    },
    {
      "path": "middleware/authMiddleware.js",
      "content": "const jwt = require('jsonwebtoken');\nconst dotenv = require('dotenv');\ndotenv.config();\n\nmodule.exports = function(req, res, next) {\n  const token = req.headers.authorization?.split(' ')[1];\n  if (!token) return res.status(401).json({ message: 'Unauthorized' });\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).json({ message: 'Invalid token' });\n  }\n};"
    }
  ]
}
